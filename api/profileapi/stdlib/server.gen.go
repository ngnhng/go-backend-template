//go:build go1.22

// Package profile_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package profile_api

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/nullable"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CursorMetaMode.
const (
	Cursor CursorMetaMode = "cursor"
)

// Defines values for OffsetMetaMode.
const (
	Offset OffsetMetaMode = "offset"
)

// CursorMeta defines model for CursorMeta.
type CursorMeta struct {
	Limit int `json:"limit"`
	Links *struct {
		Next *string `json:"next,omitempty"`
		Prev *string `json:"prev,omitempty"`
	} `json:"links,omitempty"`
	Mode       CursorMetaMode `json:"mode"`
	NextCursor *string        `json:"nextCursor,omitempty"`
	PrevCursor *string        `json:"prevCursor,omitempty"`
	RequestId  *string        `json:"requestId,omitempty"`
	TraceId    *string        `json:"traceId,omitempty"`
}

// CursorMetaMode defines model for CursorMeta.Mode.
type CursorMetaMode string

// OffsetMeta defines model for OffsetMeta.
type OffsetMeta struct {
	Links *struct {
		Next *string `json:"next,omitempty"`
		Prev *string `json:"prev,omitempty"`
	} `json:"links,omitempty"`
	Mode       OffsetMetaMode `json:"mode"`
	Page       int            `json:"page"`
	PageSize   int            `json:"pageSize"`
	RequestId  *string        `json:"requestId,omitempty"`
	TotalItems int            `json:"totalItems"`
	TotalPages int            `json:"totalPages"`
	TraceId    *string        `json:"traceId,omitempty"`
}

// OffsetMetaMode defines model for OffsetMeta.Mode.
type OffsetMetaMode string

// PaginationMeta defines model for PaginationMeta.
type PaginationMeta struct {
	union json.RawMessage
}

// Problem defines model for Problem.
type Problem struct {
	Code          *string `json:"code,omitempty"`
	Detail        *string `json:"detail,omitempty"`
	Instance      *string `json:"instance,omitempty"`
	InvalidParams *[]struct {
		Name   string `json:"name"`
		Reason string `json:"reason"`
	} `json:"invalidParams,omitempty"`
	Status               int                    `json:"status"`
	Title                string                 `json:"title"`
	TraceId              *string                `json:"traceId,omitempty"`
	Type                 *string                `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Profile defines model for Profile.
type Profile struct {
	Age       *string                                `json:"age,omitempty"`
	CreatedAt *time.Time                             `json:"createdAt,omitempty"`
	Email     nullable.Nullable[openapi_types.Email] `json:"email,omitempty"`
	Id        openapi_types.UUID                     `json:"id"`
	Name      string                                 `json:"name"`
}

// SuccessEnvelopeList defines model for SuccessEnvelopeList.
type SuccessEnvelopeList struct {
	Data []interface{}  `json:"data"`
	Meta PaginationMeta `json:"meta"`
}

// SuccessEnvelopeSingle defines model for SuccessEnvelopeSingle.
type SuccessEnvelopeSingle struct {
	Data interface{} `json:"data"`
	Meta struct {
		RequestId *string `json:"requestId,omitempty"`
		TraceId   *string `json:"traceId,omitempty"`
	} `json:"meta"`
}

// SuccessProfile defines model for SuccessProfile.
type SuccessProfile struct {
	Data Profile `json:"data"`
	Meta struct {
		RequestId *string `json:"requestId,omitempty"`
		TraceId   *string `json:"traceId,omitempty"`
	} `json:"meta"`
}

// SuccessProfileList defines model for SuccessProfileList.
type SuccessProfileList struct {
	Data []Profile      `json:"data"`
	Meta PaginationMeta `json:"meta"`
}

// CursorAfter defines model for CursorAfter.
type CursorAfter = string

// CursorBefore defines model for CursorBefore.
type CursorBefore = string

// Limit defines model for Limit.
type Limit = int

// Page defines model for Page.
type Page = int

// PageSize defines model for PageSize.
type PageSize = int

// ProfileId defines model for ProfileId.
type ProfileId = openapi_types.UUID

// ProblemResponse defines model for ProblemResponse.
type ProblemResponse = Problem

// CreateProfile defines model for CreateProfile.
type CreateProfile struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Name  string               `json:"name"`
}

// ListProfilesParams defines parameters for ListProfiles.
type ListProfilesParams struct {
	// Page 0-based page number (use with `pageSize`)
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Page size (use with `page`)
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// After Opaque cursor returned by the previous response (use with `limit`)
	After *CursorAfter `form:"after,omitempty" json:"after,omitempty"`

	// Before Opaque cursor returned by the previous response (use with `limit`)
	Before *CursorBefore `form:"before,omitempty" json:"before,omitempty"`

	// Limit Page size for cursor pagination (use with `cursor`)
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateProfileJSONBody defines parameters for CreateProfile.
type CreateProfileJSONBody struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Name  string               `json:"name"`
}

// ModifyProfileJSONBody defines parameters for ModifyProfile.
type ModifyProfileJSONBody struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Name  string               `json:"name"`
}

// UpdateProfileJSONBody defines parameters for UpdateProfile.
type UpdateProfileJSONBody struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Name  string               `json:"name"`
}

// CreateProfileJSONRequestBody defines body for CreateProfile for application/json ContentType.
type CreateProfileJSONRequestBody CreateProfileJSONBody

// ModifyProfileJSONRequestBody defines body for ModifyProfile for application/json ContentType.
type ModifyProfileJSONRequestBody ModifyProfileJSONBody

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody UpdateProfileJSONBody

// Getter for additional properties for Problem. Returns the specified
// element and whether it was found
func (a Problem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Problem
func (a *Problem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Problem to handle AdditionalProperties
func (a *Problem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["traceId"]; found {
		err = json.Unmarshal(raw, &a.TraceId)
		if err != nil {
			return fmt.Errorf("error reading 'traceId': %w", err)
		}
		delete(object, "traceId")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Problem to handle AdditionalProperties
func (a Problem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Code != nil {
		object["code"], err = json.Marshal(a.Code)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'code': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if a.InvalidParams != nil {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	if a.TraceId != nil {
		object["traceId"], err = json.Marshal(a.TraceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'traceId': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsOffsetMeta returns the union data inside the PaginationMeta as a OffsetMeta
func (t PaginationMeta) AsOffsetMeta() (OffsetMeta, error) {
	var body OffsetMeta
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOffsetMeta overwrites any union data inside the PaginationMeta as the provided OffsetMeta
func (t *PaginationMeta) FromOffsetMeta(v OffsetMeta) error {
	v.Mode = "offset"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOffsetMeta performs a merge with any union data inside the PaginationMeta, using the provided OffsetMeta
func (t *PaginationMeta) MergeOffsetMeta(v OffsetMeta) error {
	v.Mode = "offset"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCursorMeta returns the union data inside the PaginationMeta as a CursorMeta
func (t PaginationMeta) AsCursorMeta() (CursorMeta, error) {
	var body CursorMeta
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCursorMeta overwrites any union data inside the PaginationMeta as the provided CursorMeta
func (t *PaginationMeta) FromCursorMeta(v CursorMeta) error {
	v.Mode = "cursor"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCursorMeta performs a merge with any union data inside the PaginationMeta, using the provided CursorMeta
func (t *PaginationMeta) MergeCursorMeta(v CursorMeta) error {
	v.Mode = "cursor"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaginationMeta) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"mode"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaginationMeta) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "cursor":
		return t.AsCursorMeta()
	case "offset":
		return t.AsOffsetMeta()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaginationMeta) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaginationMeta) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Liveness probe
	// (GET /healthz)
	Healthz(w http.ResponseWriter, r *http.Request)
	// List profiles (offset or cursor pagination)
	// (GET /v1/profiles)
	ListProfiles(w http.ResponseWriter, r *http.Request, params ListProfilesParams)
	// Create a profile
	// (POST /v1/profiles)
	CreateProfile(w http.ResponseWriter, r *http.Request)
	// Delete a profile
	// (DELETE /v1/profiles/{id})
	DeleteProfile(w http.ResponseWriter, r *http.Request, id ProfileId)
	// Get profile by ID
	// (GET /v1/profiles/{id})
	GetProfileById(w http.ResponseWriter, r *http.Request, id ProfileId)
	// Patch an existing profile
	// (PATCH /v1/profiles/{id})
	ModifyProfile(w http.ResponseWriter, r *http.Request, id ProfileId)
	// Update an existing profile
	// (PUT /v1/profiles/{id})
	UpdateProfile(w http.ResponseWriter, r *http.Request, id ProfileId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Healthz operation middleware
func (siw *ServerInterfaceWrapper) Healthz(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Healthz(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProfiles operation middleware
func (siw *ServerInterfaceWrapper) ListProfiles(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProfilesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProfiles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProfile operation middleware
func (siw *ServerInterfaceWrapper) CreateProfile(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProfile operation middleware
func (siw *ServerInterfaceWrapper) DeleteProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ProfileId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProfile(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProfileById operation middleware
func (siw *ServerInterfaceWrapper) GetProfileById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ProfileId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProfileById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ModifyProfile operation middleware
func (siw *ServerInterfaceWrapper) ModifyProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ProfileId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ModifyProfile(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id ProfileId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProfile(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/healthz", wrapper.Healthz)
	m.HandleFunc("GET "+options.BaseURL+"/v1/profiles", wrapper.ListProfiles)
	m.HandleFunc("POST "+options.BaseURL+"/v1/profiles", wrapper.CreateProfile)
	m.HandleFunc("DELETE "+options.BaseURL+"/v1/profiles/{id}", wrapper.DeleteProfile)
	m.HandleFunc("GET "+options.BaseURL+"/v1/profiles/{id}", wrapper.GetProfileById)
	m.HandleFunc("PATCH "+options.BaseURL+"/v1/profiles/{id}", wrapper.ModifyProfile)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/profiles/{id}", wrapper.UpdateProfile)

	return m
}

type ProblemResponseApplicationProblemPlusJSONResponse Problem

type HealthzRequestObject struct {
}

type HealthzResponseObject interface {
	VisitHealthzResponse(w http.ResponseWriter) error
}

type Healthz204Response struct {
}

func (response Healthz204Response) VisitHealthzResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListProfilesRequestObject struct {
	Params ListProfilesParams
}

type ListProfilesResponseObject interface {
	VisitListProfilesResponse(w http.ResponseWriter) error
}

type ListProfiles200ResponseHeaders struct {
	Link string
}

type ListProfiles200JSONResponse struct {
	Body    SuccessProfileList
	Headers ListProfiles200ResponseHeaders
}

func (response ListProfiles200JSONResponse) VisitListProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Link", fmt.Sprint(response.Headers.Link))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListProfiles400ApplicationProblemPlusJSONResponse struct {
	ProblemResponseApplicationProblemPlusJSONResponse
}

func (response ListProfiles400ApplicationProblemPlusJSONResponse) VisitListProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListProfiles401ApplicationProblemPlusJSONResponse Problem

func (response ListProfiles401ApplicationProblemPlusJSONResponse) VisitListProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListProfiles429ApplicationProblemPlusJSONResponse Problem

func (response ListProfiles429ApplicationProblemPlusJSONResponse) VisitListProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ListProfilesdefaultApplicationProblemPlusJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response ListProfilesdefaultApplicationProblemPlusJSONResponse) VisitListProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateProfileRequestObject struct {
	Body *CreateProfileJSONRequestBody
}

type CreateProfileResponseObject interface {
	VisitCreateProfileResponse(w http.ResponseWriter) error
}

type CreateProfile201ResponseHeaders struct {
	Location string
}

type CreateProfile201JSONResponse struct {
	Body    SuccessProfile
	Headers CreateProfile201ResponseHeaders
}

func (response CreateProfile201JSONResponse) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateProfile400ApplicationProblemPlusJSONResponse struct {
	ProblemResponseApplicationProblemPlusJSONResponse
}

func (response CreateProfile400ApplicationProblemPlusJSONResponse) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProfile422ApplicationProblemPlusJSONResponse Problem

func (response CreateProfile422ApplicationProblemPlusJSONResponse) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProfiledefaultApplicationProblemPlusJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response CreateProfiledefaultApplicationProblemPlusJSONResponse) VisitCreateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteProfileRequestObject struct {
	Id ProfileId `json:"id"`
}

type DeleteProfileResponseObject interface {
	VisitDeleteProfileResponse(w http.ResponseWriter) error
}

type DeleteProfile204Response struct {
}

func (response DeleteProfile204Response) VisitDeleteProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteProfile400ApplicationProblemPlusJSONResponse struct {
	ProblemResponseApplicationProblemPlusJSONResponse
}

func (response DeleteProfile400ApplicationProblemPlusJSONResponse) VisitDeleteProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProfile404ApplicationProblemPlusJSONResponse Problem

func (response DeleteProfile404ApplicationProblemPlusJSONResponse) VisitDeleteProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProfiledefaultApplicationProblemPlusJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response DeleteProfiledefaultApplicationProblemPlusJSONResponse) VisitDeleteProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetProfileByIdRequestObject struct {
	Id ProfileId `json:"id"`
}

type GetProfileByIdResponseObject interface {
	VisitGetProfileByIdResponse(w http.ResponseWriter) error
}

type GetProfileById200JSONResponse SuccessProfile

func (response GetProfileById200JSONResponse) VisitGetProfileByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfileById400ApplicationProblemPlusJSONResponse struct {
	ProblemResponseApplicationProblemPlusJSONResponse
}

func (response GetProfileById400ApplicationProblemPlusJSONResponse) VisitGetProfileByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProfileById404ApplicationProblemPlusJSONResponse Problem

func (response GetProfileById404ApplicationProblemPlusJSONResponse) VisitGetProfileByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProfileByIddefaultApplicationProblemPlusJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response GetProfileByIddefaultApplicationProblemPlusJSONResponse) VisitGetProfileByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyProfileRequestObject struct {
	Id   ProfileId `json:"id"`
	Body *ModifyProfileJSONRequestBody
}

type ModifyProfileResponseObject interface {
	VisitModifyProfileResponse(w http.ResponseWriter) error
}

type ModifyProfile200JSONResponse SuccessProfile

func (response ModifyProfile200JSONResponse) VisitModifyProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifyProfile400ApplicationProblemPlusJSONResponse struct {
	ProblemResponseApplicationProblemPlusJSONResponse
}

func (response ModifyProfile400ApplicationProblemPlusJSONResponse) VisitModifyProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ModifyProfile404ApplicationProblemPlusJSONResponse Problem

func (response ModifyProfile404ApplicationProblemPlusJSONResponse) VisitModifyProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ModifyProfile422ApplicationProblemPlusJSONResponse Problem

func (response ModifyProfile422ApplicationProblemPlusJSONResponse) VisitModifyProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ModifyProfiledefaultApplicationProblemPlusJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response ModifyProfiledefaultApplicationProblemPlusJSONResponse) VisitModifyProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateProfileRequestObject struct {
	Id   ProfileId `json:"id"`
	Body *UpdateProfileJSONRequestBody
}

type UpdateProfileResponseObject interface {
	VisitUpdateProfileResponse(w http.ResponseWriter) error
}

type UpdateProfile200JSONResponse SuccessProfile

func (response UpdateProfile200JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile400ApplicationProblemPlusJSONResponse struct {
	ProblemResponseApplicationProblemPlusJSONResponse
}

func (response UpdateProfile400ApplicationProblemPlusJSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile404ApplicationProblemPlusJSONResponse Problem

func (response UpdateProfile404ApplicationProblemPlusJSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile422ApplicationProblemPlusJSONResponse Problem

func (response UpdateProfile422ApplicationProblemPlusJSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfiledefaultApplicationProblemPlusJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response UpdateProfiledefaultApplicationProblemPlusJSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Liveness probe
	// (GET /healthz)
	Healthz(ctx context.Context, request HealthzRequestObject) (HealthzResponseObject, error)
	// List profiles (offset or cursor pagination)
	// (GET /v1/profiles)
	ListProfiles(ctx context.Context, request ListProfilesRequestObject) (ListProfilesResponseObject, error)
	// Create a profile
	// (POST /v1/profiles)
	CreateProfile(ctx context.Context, request CreateProfileRequestObject) (CreateProfileResponseObject, error)
	// Delete a profile
	// (DELETE /v1/profiles/{id})
	DeleteProfile(ctx context.Context, request DeleteProfileRequestObject) (DeleteProfileResponseObject, error)
	// Get profile by ID
	// (GET /v1/profiles/{id})
	GetProfileById(ctx context.Context, request GetProfileByIdRequestObject) (GetProfileByIdResponseObject, error)
	// Patch an existing profile
	// (PATCH /v1/profiles/{id})
	ModifyProfile(ctx context.Context, request ModifyProfileRequestObject) (ModifyProfileResponseObject, error)
	// Update an existing profile
	// (PUT /v1/profiles/{id})
	UpdateProfile(ctx context.Context, request UpdateProfileRequestObject) (UpdateProfileResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Healthz operation middleware
func (sh *strictHandler) Healthz(w http.ResponseWriter, r *http.Request) {
	var request HealthzRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Healthz(ctx, request.(HealthzRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Healthz")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthzResponseObject); ok {
		if err := validResponse.VisitHealthzResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProfiles operation middleware
func (sh *strictHandler) ListProfiles(w http.ResponseWriter, r *http.Request, params ListProfilesParams) {
	var request ListProfilesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProfiles(ctx, request.(ListProfilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProfiles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProfilesResponseObject); ok {
		if err := validResponse.VisitListProfilesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProfile operation middleware
func (sh *strictHandler) CreateProfile(w http.ResponseWriter, r *http.Request) {
	var request CreateProfileRequestObject

	var body CreateProfileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProfile(ctx, request.(CreateProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProfileResponseObject); ok {
		if err := validResponse.VisitCreateProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProfile operation middleware
func (sh *strictHandler) DeleteProfile(w http.ResponseWriter, r *http.Request, id ProfileId) {
	var request DeleteProfileRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProfile(ctx, request.(DeleteProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProfileResponseObject); ok {
		if err := validResponse.VisitDeleteProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProfileById operation middleware
func (sh *strictHandler) GetProfileById(w http.ResponseWriter, r *http.Request, id ProfileId) {
	var request GetProfileByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfileById(ctx, request.(GetProfileByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfileById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProfileByIdResponseObject); ok {
		if err := validResponse.VisitGetProfileByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyProfile operation middleware
func (sh *strictHandler) ModifyProfile(w http.ResponseWriter, r *http.Request, id ProfileId) {
	var request ModifyProfileRequestObject

	request.Id = id

	var body ModifyProfileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyProfile(ctx, request.(ModifyProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ModifyProfileResponseObject); ok {
		if err := validResponse.VisitModifyProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProfile operation middleware
func (sh *strictHandler) UpdateProfile(w http.ResponseWriter, r *http.Request, id ProfileId) {
	var request UpdateProfileRequestObject

	request.Id = id

	var body UpdateProfileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProfile(ctx, request.(UpdateProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProfileResponseObject); ok {
		if err := validResponse.VisitUpdateProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
